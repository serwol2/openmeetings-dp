name: 'plan feature-push'
on:
  #pull_request:
  # push:
    branches:
     - feature
    # path:
    #   - terraform/**
env:
  AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY_ID}}
  #GITHUB_TOKEN: ${{secrets.MY_GITHUB_TOKEN1}}
  #REGISTRY: ghcr.io
jobs:
    ######################### LINTERS ###################################

    lint-dockerfile:           
      name: lint-dockerfile
      runs-on: ubuntu-latest
      steps: 
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: lint-dockerfile
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile

    ######################### LINTERS & TESTS ###################################
  
    test-terraform: 
     name: terraform-tests
     runs-on: ubuntu-latest
     env:
        WORKING_DIRECTORY: terraform
  
     steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Use terraform 1.1.7'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      # - name: 'Terraform fmt'
      #   id: fmt
      #   run: terraform fmt -check
      #   continue-on-error: true
      #   working-directory: ${{ env.WORKING_DIRECTORY }}    

      - name: Run tfsec with reviewdog output on the PR
        uses: reviewdog/action-tfsec@master
        with:
          github_token: ${{ secrets.MY_GITHUB_TOKEN1 }}
          working_directory: ${{ env.WORKING_DIRECTORY }} #./terraform # Change working directory
          level: info # Get more output from reviewdog
          reporter: github-pr-review # Change reviewdog reporter
          #filter_mode: nofilter # Check all files, not just the diff
          fail_on_error: true # Fail action if errors are found
          flags: -tee # Add debug flag to reviewdog
          #tfsec_flags: "" # Optional
  
      # - name: 'Terraform init'
      #   id: init
      #   run: terraform init 
      #   working-directory: ${{ env.WORKING_DIRECTORY }}

      # - name: terraform validate
      #   uses: robertdebock/terraform-action@1.1.2
      #   with:
      #     action: validate
      #     directory: ${{ env.WORKING_DIRECTORY }} 

      # - name: Terraform plan
      #   id: plan
      #   run: terraform plan -no-color
      #   working-directory: ${{ env.WORKING_DIRECTORY }}


      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1 
    ######################### LINTERS & TESTS ###################################


    ######################### Create docker image ########## Здесь правильной!! Брать отсюда!! #########################
   
    build-and-push-image:
        runs-on: ubuntu-latest
        permissions:
          contents: read
          packages: write

        steps:
          - name: Checkout repository
            uses: actions/checkout@v3

          - name: Log in to the Container registry
            uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - name: Extract metadata (tags, labels) for Docker
            id: meta
            uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
            with:
              images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

          - name: Build and push Docker image
            uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
            with:
              context: .
              push: true
              tags: ${{ steps.meta.outputs.tags }}
              labels: ${{ steps.meta.outputs.labels }}


######################### Create docker image ########## Здесь правильной!! Брать отсюда!! #########################



    ######################### Create docker image ###################################
    # docker-build-and-push:
    #     name: build-docker-image
    #     runs-on: ubuntu-latest  
    #     # needs: 
    #     #   - lint-dockerfile
    #     steps:      
    #     - name: Checkout repository
    #       uses: actions/checkout@v3

    #     - name: Login to GitHub Container Registry
    #       uses: docker/login-action@v1
    #       with:
    #         registry: ghcr.io
    #         username: ${{ github.actor }}
    #         password: ${{ secrets.MY_GITHUB_TOKEN1 }}
        
    #     - name: Build & Push to GitHub Package 
    #       uses: opspresso/action-docker@master  
    #       with:
    #         args: --docker
    #       env:
    #         PASSWORD: ${{ secrets.MY_GITHUB_TOKEN1 }}
    #         REGISTRY: "docker.pkg.github.com"
    #         TAG_NAME: "feature-v5.0.0-full"
    #         #DOCKERFILE: ./Dockerfile
    #         DOCKER_BUILD_ARGS: --build-arg BUILD_TYPE=full   #min
    #         IMAGE_NAME: openmeetings-dp
    ######################### Create docker image ###################################


# https://localhost:5443/openmeetings/install?2  попробовать


  ######################### Create pull request ###################################

    create-pull-request:
        runs-on: ubuntu-latest
        name: create-pull-request
        needs: 
          - lint-dockerfile
          - test-terraform
        

        steps:
          - name: Check out repository code
            uses: actions/checkout@v2
            # with:
            #   fetch-depth: 0
            #   ref: feature


          - name: install github cli
            run: |
              sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
              sudo apt-add-repository https://cli.github.com/packages
              sudo apt update
              sudo apt install gh

          # - name: auth to github
          #   run: 
          #     gh auth login --with-token ${{ secrets.MY_GITHUB_TOKEN1 }}
        
          - name: Create Pull Request CLI
            run: gh pr create --title "The new feature" --body "test and merge to develop pls" --base develop --head feature
            env: 
              GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN1  }}




          # - name: Create Pull Request
          #   uses: peter-evans/create-pull-request@v4
          #   with:
          #     token: ${{ secrets.MY_GITHUB_TOKEN1 }}
          #     commit-message: tralala
          #     title: testtest
          #     body: >
          #       This PR is auto-generated by 
          #       [create-pull-request](https://github.com/peter-evans/create-pull-request)
          #     labels: report, automated pr
          #     base: develop
          #     branch: feature
          # # draft: true
          
          # # reviewers: serwol
          
          # - name: Create Pull Request
          #   uses: devops-infra/action-pull-request@v0.4.2
          #   with:
          #     github_token: ${{ secrets.MY_GITHUB_TOKEN1 }}
          #     title: 'Testt'
          #     reviewer: serwol
          #     source_branch: feature 
          #     target_branch: develop
          #     draft: true
          #     get_diff: true