name: 'plan feature-push'
on:
  #pull_request:
   push:
    branches:
     - feature
    # path:
    #   - terraform/**
env:
  AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY_ID}}
  #GITHUB_TOKEN: ${{secrets.MY_GITHUB_TOKEN1}}
  #REGISTRY: ghcr.io
jobs:
    ######################### LINTERS ###################################

    lint-dockerfile:           #хороший линтер
      name: lint-dockerfile
      runs-on: ubuntu-latest
      steps: 
      - name: Checkout
        uses: actions/checkout@v3
    
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      # - uses: hadolint/hadolint-action@v2.0.0     # !!!!
      #   with:
      #       dockerfile: Dockerfile

      # - name: lint-dockerfile
      #   uses: luke142367/Docker-Lint-Action@v1.0.0
      #   with:
      #     target: Dockerfile
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      #     target: Yes

      - name: lint-dockerfile
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile

    ######################### LINTERS ###################################
  
    test-terraform: 
     name: running terraform tests
     runs-on: ubuntu-latest
     env:
        WORKING_DIRECTORY: terraform
  
     steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Use terraform 1.1.7'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: 'Terraform fmt'
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: ${{ env.WORKING_DIRECTORY }}    

      


      - name: Run tfsec with reviewdog output on the PR
        uses: reviewdog/action-tfsec@master
        with:
          github_token: ${{ secrets.GITH_TOKEN }}
          working_directory: ${{ env.WORKING_DIRECTORY }} #./terraform # Change working directory
          level: info # Get more output from reviewdog
          reporter: github-pr-review # Change reviewdog reporter
          #filter_mode: nofilter # Check all files, not just the diff
          fail_on_error: true # Fail action if errors are found
          flags: -tee # Add debug flag to reviewdog
          #tfsec_flags: "" # Optional
  
      - name: 'Terraform init'
        id: init
        run: terraform init 
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: terraform validate
        uses: robertdebock/terraform-action@1.1.2
        with:
          action: validate
          directory: ${{ env.WORKING_DIRECTORY }} 

      # - name: Terraform plan
      #   id: plan
      #   run: terraform plan -no-color
      #   working-directory: ${{ env.WORKING_DIRECTORY }}


      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1 

















    ######################### Create docker image ###################################
    # docker-build-and-push:
    #     name: build-docker-image
    #     runs-on: ubuntu-latest  
    #     # needs: 
    #     #   - lint-dockerfile
    #     steps:      
    #     - name: Checkout repository
    #       uses: actions/checkout@v3

    #     - name: Login to GitHub Container Registry
    #       uses: docker/login-action@v1
    #       with:
    #         registry: ghcr.io
    #         username: ${{ github.actor }}
    #         password: ${{ secrets.MY_GITHUB_TOKEN1 }}
        
    #     - name: Build & Push to GitHub Package 
    #       uses: opspresso/action-docker@master  
    #       with:
    #         args: --docker
    #       env:
    #         PASSWORD: ${{ secrets.MY_GITHUB_TOKEN1 }}
    #         REGISTRY: "docker.pkg.github.com"
    #         TAG_NAME: "feature-v5.0.0-full"
    #         #DOCKERFILE: ./Dockerfile
    #         DOCKER_BUILD_ARGS: --build-arg BUILD_TYPE=full   #min
    #         IMAGE_NAME: openmeetings-dp
    ######################### Create docker image ###################################


# https://localhost:5443/openmeetings/install?2  попробовать

 

  # create-pull-request:
  #   runs-on: ubuntu-latest
  #   name: create-pull-request
  #   needs: 
  #     - make_stru_test
  #     - python-lint
  #     - send-email

  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #       # with:
  #       #   fetch-depth: 0
  #       #   ref: feature








      # - name: install github cli
      #   run: |
      #     sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
      #     sudo apt-add-repository https://cli.github.com/packages
      #     sudo apt update
      #     sudo apt install gh

      # - name: auth to github
      #   run: 
      #     gh auth login --with-token ${{ secrets.GITH_TOKEN  }}
    



      # - name: Create Pull Request CLI
      #   run: gh pr create --title "The new feature" --body "test and merge to feature pls" --base dev --head feature
      #   env: 
      #     GITHUB_TOKEN: ${{ secrets.GITH_TOKEN  }}



      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v4
      #   with:
      #     token: ${{ secrets.GITH_TOKEN }}
      #     commit-message: tralala
      #     title: testtest
      #     body: >
      #       This PR is auto-generated by 
      #       [create-pull-request](https://github.com/peter-evans/create-pull-request)
      #     labels: report, automated pr
          # base: feature
          # branch: main
          # draft: true
          
          # reviewers: serwol
          

        # uses: devops-infra/action-pull-request@v0.4.2
        # with:
        #   github_token: ${{ secrets.GITH_TOKEN }}
        #   title: 'Testt'
        #   reviewer: serwol
        #   source_branch: feature 
        #   target_branch: main
        #   draft: true
        #   get_diff: true